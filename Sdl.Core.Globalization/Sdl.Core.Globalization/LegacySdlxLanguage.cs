using System;
using System.Collections.Generic;
using System.Globalization;

namespace Sdl.Core.Globalization
{
	public class LegacySdlxLanguage
	{
		private static readonly Dictionary<string, CultureInfo> SdlxCultureMap = new Dictionary<string, CultureInfo>(StringComparer.OrdinalIgnoreCase);

		private static readonly Dictionary<string, string> TestSdlxCultureMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

		private static readonly Dictionary<string, string> SdlxIsoToTradosIso = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

		private static readonly string[] SdlxIsoToTradosIsoValues = new string[254]
		{
			"AF",
			"AF-01",
			"AR-AE",
			"AR-AE",
			"AR-BH",
			"AR-BH",
			"AR-DZ",
			"AR-DZ",
			"AR-EG",
			"AR-EG",
			"AR-IQ",
			"AR-IQ",
			"AR-JO",
			"AR-JO",
			"AR-KW",
			"AR-KW",
			"AR-LB",
			"AR-LB",
			"AR-LY",
			"AR-LY",
			"AR-MA",
			"AR-MA",
			"AR-OM",
			"AR-OM",
			"AR-QA",
			"AR-QA",
			"AR-SA",
			"AR-SA",
			"AR-SY",
			"AR-SY",
			"AR-TN",
			"AR-TN",
			"AR-YE",
			"AR-YE",
			"AZ-XC",
			"AZ-CY",
			"AZ-XE",
			"AZ-LT",
			"BE",
			"BE-01",
			"BG",
			"BG-01",
			"CA",
			"CA-01",
			"CS",
			"CS-01",
			"CY",
			"CY-01",
			"DA",
			"DA-01",
			"DE",
			"DE-DE",
			"DE-AT",
			"DE-AT",
			"DE-CH",
			"DE-CH",
			"DE-LI",
			"DE-LI",
			"DE-LU",
			"DE-LU",
			"EL",
			"EL-01",
			"EN-AU",
			"EN-AU",
			"EN-BZ",
			"EN-BZ",
			"EN-CA",
			"EN-CA",
			"EN-CR",
			"EN-CB",
			"EN-GB",
			"EN-GB",
			"EN-IE",
			"EN-IE",
			"EN-JM",
			"EN-JM",
			"EN-NZ",
			"EN-NZ",
			"EN-TR",
			"EN-TT",
			"EN-US",
			"EN-US",
			"EN-ZA",
			"EN-ZA",
			"ES",
			"ES-ES",
			"ES-AR",
			"ES-AR",
			"ES-BO",
			"ES-BO",
			"ES-CN",
			"ES-CL",
			"ES-CO",
			"ES-CO",
			"ES-CR",
			"ES-CR",
			"ES-DO",
			"ES-DO",
			"ES-EC",
			"ES-EC",
			"ES-GT",
			"ES-GT",
			"ES-HN",
			"ES-HN",
			"ES-MX",
			"ES-MX",
			"ES-NI",
			"ES-NI",
			"ES-PA",
			"ES-PA",
			"ES-PE",
			"ES-PE",
			"ES-PR",
			"ES-PR",
			"ES-PY",
			"ES-PY",
			"ES-SV",
			"ES-SV",
			"ES-UY",
			"ES-UY",
			"ES-VE",
			"ES-VE",
			"ES-XM",
			"ES-EM",
			"ES-XL",
			"ES-EM",
			"ES-XY",
			"ES-EM",
			"ET",
			"ET-01",
			"EU",
			"EU-01",
			"FA",
			"FA-01",
			"FI",
			"FI-01",
			"FO",
			"FO-01",
			"FR",
			"FR-FR",
			"FR-BE",
			"FR-BE",
			"FR-CA",
			"FR-CA",
			"FR-CH",
			"FR-CH",
			"FR-LU",
			"FR-LU",
			"GU",
			"GU-01",
			"HI",
			"HI-01",
			"HE",
			"HE-01",
			"HR",
			"SH-HR",
			"HU",
			"HU-01",
			"HY",
			"AM-01",
			"IN",
			"ID-01",
			"IS",
			"IS-01",
			"IT",
			"IT-IT",
			"IT-CH",
			"IT-CH",
			"JA",
			"JA-01",
			"KA",
			"KA-01",
			"KK",
			"KK-01",
			"KO",
			"KO-KR",
			"KY",
			"KY-01",
			"LT",
			"LT-01",
			"LV",
			"LV-01",
			"MK",
			"MK-01",
			"MN-XC",
			"MN-01",
			"MS-BX",
			"MS-BN",
			"MS-MY",
			"MS-MY",
			"NL",
			"NL-NL",
			"NL-BE",
			"NL-BE",
			"NO-NO",
			"NO-NO",
			"NO-XY",
			"NO-NY",
			"PL",
			"PL-01",
			"PT",
			"PT-PT",
			"PT-BR",
			"PT-BR",
			"QU",
			"QU-01",
			"RO",
			"RO-RO",
			"RU",
			"RU-RU",
			"SK",
			"SK-01",
			"SL",
			"SL-01",
			"SQ",
			"SQ-01",
			"SR",
			"SH-SR",
			"SR-XC",
			"SH-YU",
			"SV",
			"SV-SE",
			"SV-FI",
			"SV-FI",
			"SW",
			"SW-01",
			"SZ",
			"SE-01",
			"TH",
			"TH-01",
			"TL",
			"TL-01",
			"TR",
			"TR-01",
			"TT",
			"TT-01",
			"UK",
			"UK-01",
			"UR",
			"UR-01",
			"UZ-XC",
			"UZ-CY",
			"UZ-XL",
			"UZ-LT",
			"VI",
			"VI-01",
			"ZH-CN",
			"ZH-CN",
			"ZH-HK",
			"ZH-HK",
			"ZH-SG",
			"ZH-SG",
			"ZH-TW",
			"ZH-TW"
		};

		private static string[] SdlxCultureMapValues = new string[362]
		{
			"AF",
			"af-ZA",
			"AM",
			"am-ET",
			"AR-AE",
			"ar-AE",
			"AR-BH",
			"ar-BH",
			"AR-DZ",
			"ar-DZ",
			"AR-EG",
			"ar-EG",
			"AR-IQ",
			"ar-IQ",
			"AR-JO",
			"ar-JO",
			"AR-KW",
			"ar-KW",
			"AR-LB",
			"ar-LB",
			"AR-LY",
			"ar-LY",
			"AR-MA",
			"ar-MA",
			"AR-OM",
			"ar-OM",
			"AR-QA",
			"ar-QA",
			"AR-SA",
			"ar-SA",
			"AR-SY",
			"ar-SY",
			"AR-TN",
			"ar-TN",
			"AR-YE",
			"ar-YE",
			"AS",
			"as-IN",
			"AZ-XC",
			"az-Cyrl-AZ",
			"AZ-XE",
			"az-Latn-AZ",
			"BA",
			"ba-RU",
			"BE",
			"be-BY",
			"BG",
			"bg-BG",
			"BN",
			"bn-IN",
			"BN-BD",
			"bn-BD",
			"BO",
			"bo-CN",
			"BR",
			"br-FR",
			"BS",
			"bs-Latn-BA",
			"CA",
			"ca-ES",
			"CO",
			"co-FR",
			"CS",
			"cs-CZ",
			"CY",
			"cy-GB",
			"DA",
			"da-DK",
			"DE",
			"de-DE",
			"DE-AT",
			"de-AT",
			"DE-CH",
			"de-CH",
			"DE-LI",
			"de-LI",
			"DE-LU",
			"de-LU",
			"EL",
			"el-GR",
			"EN-AU",
			"en-AU",
			"EN-BZ",
			"en-BZ",
			"EN-CA",
			"en-CA",
			"EN-CR",
			"en-029",
			"EN-GB",
			"en-GB",
			"EN-IE",
			"en-IE",
			"EN-IN",
			"en-IN",
			"EN-JM",
			"en-JM",
			"EN-NZ",
			"en-NZ",
			"EN-PH",
			"en-PH",
			"EN-RH",
			"en-ZW",
			"EN-TR",
			"en-TT",
			"EN-US",
			"en-US",
			"EN-ZA",
			"en-ZA",
			"ES",
			"es-ES",
			"ES-AR",
			"es-AR",
			"ES-BO",
			"es-BO",
			"ES-CN",
			"es-CL",
			"ES-CO",
			"es-CO",
			"ES-CR",
			"es-CR",
			"ES-DO",
			"es-DO",
			"ES-EC",
			"es-EC",
			"ES-GT",
			"es-GT",
			"ES-HN",
			"es-HN",
			"ES-MX",
			"es-MX",
			"ES-NI",
			"es-NI",
			"ES-PA",
			"es-PA",
			"ES-PE",
			"es-PE",
			"ES-PR",
			"es-PR",
			"ES-PY",
			"es-PY",
			"ES-SV",
			"es-SV",
			"ES-US",
			"es-US",
			"ES-UY",
			"es-UY",
			"ES-VE",
			"es-VE",
			"ES-XL",
			"es-419",
			"ES-XM",
			"es-ES",
			"ES-XY",
			"es-ES",
			"ET",
			"et-EE",
			"EU",
			"eu-ES",
			"FA",
			"fa-IR",
			"FI",
			"fi-FI",
			"FL",
			"fil-PH",
			"FO",
			"fo-FO",
			"FR",
			"fr-FR",
			"FR-BE",
			"fr-BE",
			"FR-CA",
			"fr-CA",
			"FR-CH",
			"fr-CH",
			"FR-LU",
			"fr-LU",
			"FR-MC",
			"fr-MC",
			"FY",
			"fy-NL",
			"GA",
			"ga-IE",
			"GL",
			"gl-ES",
			"GU",
			"gu-IN",
			"HA",
			"ha-Latn-NG",
			"HE",
			"he-IL",
			"HI",
			"hi-IN",
			"HR",
			"hr-HR",
			"HU",
			"hu-HU",
			"HY",
			"hy-AM",
			"IG",
			"ig-NG",
			"IN",
			"id-ID",
			"IS",
			"is-IS",
			"IT",
			"it-IT",
			"IT-CH",
			"it-CH",
			"JA",
			"ja-JP",
			"KA",
			"ka-GE",
			"KK",
			"kk-KZ",
			"KL",
			"kl-GL",
			"KM",
			"km-KH",
			"KN",
			"kn-IN",
			"KO",
			"ko-KR",
			"KY",
			"ky-KG",
			"LO",
			"lo-LA",
			"LT",
			"lt-LT",
			"LV",
			"lv-LV",
			"MI",
			"mi-NZ",
			"MK",
			"mk-MK",
			"ML",
			"ml-IN",
			"ML-IN",
			"ml-IN",
			"MN-XC",
			"mn-MN",
			"MR",
			"mr-IN",
			"MS-BX",
			"ms-BN",
			"MS-MY",
			"ms-MY",
			"MT",
			"mt-MT",
			"NE",
			"ne-NP",
			"NL",
			"nl-NL",
			"NL-BE",
			"nl-BE",
			"NO-NO",
			"nb-NO",
			"NO-XY",
			"nn-NO",
			"OC",
			"oc-FR",
			"OR",
			"or-IN",
			"PA",
			"pa-IN",
			"PL",
			"pl-PL",
			"PS",
			"ps-AF",
			"PT",
			"pt-PT",
			"PT-BR",
			"pt-BR",
			"QU",
			"quz-BO",
			"RM",
			"rm-CH",
			"RO",
			"ro-RO",
			"RO-MV",
			"ro-RO",
			"RU",
			"ru-RU",
			"RU-MV",
			"ru-RU",
			"RW",
			"rw-RW",
			"SA",
			"sa-IN",
			"SH",
			"hr-HR",
			"SI",
			"si-LK",
			"SK",
			"sk-SK",
			"SL",
			"sl-SI",
			"SQ",
			"sq-AL",
			"SR",
			"sr-Latn-CS",
			"SR-XC",
			"sr-Cyrl-CS",
			"ST",
			"ns-ZA",
			"SV",
			"sv-SE",
			"SV-FI",
			"sv-FI",
			"SW",
			"sw-KE",
			"SZ",
			"se-FI",
			"TA",
			"ta-IN",
			"TE",
			"te-IN",
			"TG",
			"tg-Cyrl-TJ",
			"TH",
			"th-TH",
			"TK",
			"tk-TM",
			"TL",
			"fil-PH",
			"TN",
			"tn-ZA",
			"TR",
			"tr-TR",
			"TT",
			"tt-RU",
			"UG",
			"ug-CN",
			"UK",
			"uk-UA",
			"UR",
			"ur-PK",
			"UR-PK",
			"ur-PK",
			"UZ-XC",
			"uz-Cyrl-UZ",
			"UZ-XL",
			"uz-Latn-UZ",
			"VI",
			"vi-VN",
			"WO",
			"wo-SN",
			"XH",
			"xh-ZA",
			"YO",
			"yo-NG",
			"ZH-CN",
			"zh-CN",
			"ZH-HK",
			"zh-HK",
			"ZH-SG",
			"zh-SG",
			"ZH-TW",
			"zh-TW",
			"ZH-XM",
			"zh-MO",
			"ZU",
			"zu-ZA"
		};

		private static void FillSdlxIsoToTradosIso()
		{
			for (int i = 0; i < SdlxIsoToTradosIsoValues.Length; i += 2)
			{
				SdlxIsoToTradosIso.Add(SdlxIsoToTradosIsoValues[i], SdlxIsoToTradosIsoValues[i + 1]);
			}
		}

		private static void FillSdlxCultureMap()
		{
			lock (SdlxCultureMap)
			{
				if (SdlxCultureMap.Count == 0)
				{
					for (int i = 0; i < SdlxCultureMapValues.Length; i += 2)
					{
						CultureInfo value = null;
						try
						{
							value = new CultureInfo(SdlxCultureMapValues[i + 1]);
						}
						catch
						{
						}
						SdlxCultureMap.Add(SdlxCultureMapValues[i], value);
						TestSdlxCultureMap.Add(SdlxCultureMapValues[i], SdlxCultureMapValues[i + 1]);
					}
					FillSdlxIsoToTradosIso();
				}
			}
		}

		public static int GetLcidFromIsoCode(string isoCode)
		{
			return GetCultureInfoFromIsoCode(isoCode)?.LCID ?? 0;
		}

		public static CultureInfo GetCultureInfoFromIsoCode(string isoCode)
		{
			string codeUsed;
			return TestGetCultureInfoFromIsoCode(isoCode, out codeUsed);
		}

		private static CultureInfo TestGetCultureInfoFromIsoCode(string isoCode, out string codeUsed)
		{
			if (SdlxCultureMap != null && SdlxCultureMap.Count == 0)
			{
				FillSdlxCultureMap();
			}
			if (!TestSdlxCultureMap.TryGetValue(isoCode, out codeUsed))
			{
				codeUsed = isoCode;
			}
			if (!SdlxCultureMap.TryGetValue(isoCode, out CultureInfo value))
			{
				lock (SdlxCultureMap)
				{
					if (SdlxCultureMap.TryGetValue(isoCode, out value))
					{
						return value;
					}
					if (!SdlxIsoToTradosIso.TryGetValue(isoCode, out string value2))
					{
						value2 = isoCode;
					}
					codeUsed = value2;
					int lcidFromIsoCode = LegacyTradosLanguage.GetLcidFromIsoCode(value2);
					if (lcidFromIsoCode != 0)
					{
						try
						{
							CultureInfo cultureInfo = new CultureInfo(lcidFromIsoCode);
							SdlxCultureMap.Add(isoCode, cultureInfo);
							return cultureInfo;
						}
						catch (Exception)
						{
							SdlxCultureMap.Add(isoCode, null);
							return value;
						}
					}
					return value;
				}
			}
			return value;
		}
	}
}
